// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:Vio_Telehealth/models/area.dart';
import 'package:Vio_Telehealth/generated/json/area_helper.dart';
import 'package:Vio_Telehealth/models/profit_transfer_entity.dart';
import 'package:Vio_Telehealth/generated/json/profit_transfer_entity_helper.dart';
import 'package:Vio_Telehealth/models/user.dart';
import 'package:Vio_Telehealth/generated/json/user_helper.dart';
import 'package:Vio_Telehealth/models/subscription_entity.dart';
import 'package:Vio_Telehealth/generated/json/subscription_entity_helper.dart';
import 'package:Vio_Telehealth/models/complain_entity.dart';
import 'package:Vio_Telehealth/generated/json/complain_entity_helper.dart';
import 'package:Vio_Telehealth/models/region.dart';
import 'package:Vio_Telehealth/generated/json/region_entity_helper.dart';
import 'package:Vio_Telehealth/models/category_entity.dart';
import 'package:Vio_Telehealth/generated/json/category_entity_helper.dart';
import 'package:Vio_Telehealth/models/product_entity.dart';
import 'package:Vio_Telehealth/generated/json/product_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ProfitTransferEntity:
			return profitTransferEntityFromJson(data as ProfitTransferEntity, json) as T;			case ProfitTransferBankDetails:
			return profitTransferBankDetailsFromJson(data as ProfitTransferBankDetails, json) as T;			case ProfitTransferStatu:
			return profitTransferStatuFromJson(data as ProfitTransferStatu, json) as T;			case SubscriptionEntity:
			return subscriptionEntityFromJson(data as SubscriptionEntity, json) as T;			case SubscriptionInterval:
			return subscriptionIntervalFromJson(data as SubscriptionInterval, json) as T;			case User:
			return userFromJson(data as User, json) as T;			case UserAddress:
			return userAddressFromJson(data as UserAddress, json) as T;		case Area:
			return areaFromJson(data as Area, json) as T;			case ProfitTransferEntity:
			return profitTransferEntityFromJson(data as ProfitTransferEntity, json) as T;			case ProfitTransferBankDetails:
			return profitTransferBankDetailsFromJson(data as ProfitTransferBankDetails, json) as T;			case ProfitTransferStatu:
			return profitTransferStatuFromJson(data as ProfitTransferStatu, json) as T;			case User:
			return userFromJson(data as User, json) as T;			case UserAddress:
			return userAddressFromJson(data as UserAddress, json) as T;			case SubscriptionEntity:
			return subscriptionEntityFromJson(data as SubscriptionEntity, json) as T;			case SubscriptionInterval:
			return subscriptionIntervalFromJson(data as SubscriptionInterval, json) as T;			case ComplainEntity:
			return complainEntityFromJson(data as ComplainEntity, json) as T;			case ComplainStatu:
			return complainStatuFromJson(data as ComplainStatu, json) as T;			case Region:
			return regionEntityFromJson(data as Region, json) as T;		case CategoryEntity:
			return categoryEntityFromJson(data as CategoryEntity, json) as T;			case User:
			return userFromJson(data as User, json) as T;			case UserAddress:
			return userAddressFromJson(data as UserAddress, json) as T;			case ProductEntity:
			return productEntityFromJson(data as ProductEntity, json) as T;			case ProductOption:
			return productOptionFromJson(data as ProductOption, json) as T;  }
		return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ProfitTransferEntity:
				return profitTransferEntityToJson(data as ProfitTransferEntity);
			case ProfitTransferBankDetails:
				return profitTransferBankDetailsToJson(
						data as ProfitTransferBankDetails);
			case ProfitTransferStatu:
				return profitTransferStatuToJson(data as ProfitTransferStatu);
			case SubscriptionEntity:
				return subscriptionEntityToJson(data as SubscriptionEntity);
			case SubscriptionInterval:
				return subscriptionIntervalToJson(data as SubscriptionInterval);
			case Area: return areaToJson(data as Area);
			case ProfitTransferEntity:
				return profitTransferEntityToJson(data as ProfitTransferEntity);
			case ProfitTransferBankDetails:
				return profitTransferBankDetailsToJson(
						data as ProfitTransferBankDetails);
			case ProfitTransferStatu:
				return profitTransferStatuToJson(data as ProfitTransferStatu);
			case User:
				return userToJson(data as User);
			case UserAddress:
				return userAddressToJson(data as UserAddress);
			case SubscriptionEntity:
				return subscriptionEntityToJson(data as SubscriptionEntity);
			case SubscriptionInterval:
				return subscriptionIntervalToJson(data as SubscriptionInterval);
			case ComplainEntity:
				return complainEntityToJson(data as ComplainEntity);
			case ComplainStatu:
				return complainStatuToJson(data as ComplainStatu);
			case Region:
				return regionEntityToJson(data as Region);
			case CategoryEntity:
				return categoryEntityToJson(data as CategoryEntity);
			case User:
				return userToJson(data as User);
			case UserAddress:
				return userAddressToJson(data as UserAddress);
			case ProductEntity:
				return productEntityToJson(data as ProductEntity);
			case ProductOption:
				return productOptionToJson(data as ProductOption);
		}
		return null;
	}
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ProfitTransferEntity':
			return ProfitTransferEntity().fromJson(json);			case 'ProfitTransferBankDetails':
			return ProfitTransferBankDetails().fromJson(json);			case 'ProfitTransferStatu':
			return ProfitTransferStatu().fromJson(json);			case 'SubscriptionEntity':
			return SubscriptionEntity().fromJson(json);			case 'SubscriptionInterval':
			return SubscriptionInterval().fromJson(json);			case 'ComplainEntity':
			return ComplainEntity().fromJson(json);			case 'ComplainStatu':
			return ComplainStatu().fromJson(json);			case 'Session':
			return ComplainStatu().fromJson(json);			case 'Area':
			return Area().fromJson(json);			case 'ProfitTransferEntity':
			return ProfitTransferEntity().fromJson(json);			case 'ProfitTransferBankDetails':
			return ProfitTransferBankDetails().fromJson(json);			case 'ProfitTransferStatu':
			return ProfitTransferStatu().fromJson(json);			case 'User':
			return User().fromJson(json);			case 'UserAddress':
			return UserAddress().fromJson(json);			case 'SubscriptionEntity':
			return SubscriptionEntity().fromJson(json);			case 'SubscriptionInterval':
			return SubscriptionInterval().fromJson(json);			case 'ComplainEntity':
			return ComplainEntity().fromJson(json);			case 'ComplainStatu':
			return ComplainStatu().fromJson(json);			case 'RegionEntity':
			return Region().fromJson(json);  case 'CategoryEntity':
			return CategoryEntity().fromJson(json);			case 'User':
			return User().fromJson(json);			case 'UserAddress':
			return UserAddress().fromJson(json);			case 'ProductEntity':
			return ProductEntity().fromJson(json);			case 'ProductOption':
			return ProductOption().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ProfitTransferEntity':
			return List<ProfitTransferEntity>();			case 'ProfitTransferBankDetails':
			return List<ProfitTransferBankDetails>();			case 'ProfitTransferStatu':
			return List<ProfitTransferStatu>();			case 'SubscriptionEntity':
			return List<SubscriptionEntity>();			case 'SubscriptionInterval':
			return List<SubscriptionInterval>();			case 'ComplainEntity':
			return List<ComplainEntity>();			case 'ComplainStatu':
			return List<ComplainStatu>();		case 'Area':
			return List<Area>();			case 'ProfitTransferEntity':
			return List<ProfitTransferEntity>();			case 'ProfitTransferBankDetails':
			return List<ProfitTransferBankDetails>();			case 'ProfitTransferStatu':
			return List<ProfitTransferStatu>();			case 'User':
			return List<User>();			case 'UserAddress':
			return List<UserAddress>();			case 'SubscriptionEntity':
			return List<SubscriptionEntity>();			case 'SubscriptionInterval':
			return List<SubscriptionInterval>();			case 'ComplainEntity':
			return List<ComplainEntity>();			case 'ComplainStatu':
			return List<ComplainStatu>();			case 'RegionEntity':
			return List<Region>(); case 'CategoryEntity':
			return List<CategoryEntity>();			case 'User':
			return List<User>();			case 'UserAddress':
			return List<UserAddress>();			case 'ProductEntity':
			return List<ProductEntity>();			case 'ProductOption':
			return List<ProductOption>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}