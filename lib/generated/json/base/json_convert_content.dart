// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:Vio_Telehealth/models/user.dart';
import 'package:Vio_Telehealth/generated/json/user_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {	case User:
			return userFromJson(data as User, json) as T;			case UserWallet:
			return userWalletFromJson(data as UserWallet, json) as T;			case UserDocuments:
			return userDocumentsFromJson(data as UserDocuments, json) as T;			case UserPaymentCards:
			return userPaymentCardsFromJson(data as UserPaymentCards, json) as T;			case TimeSlot:
			return timeSlotFromJson(data as TimeSlot, json) as T;			case UserSubscription:
			return userSubscriptionFromJson(data as UserSubscription, json) as T;			case UserBankDetails:
			return userBankDetailsFromJson(data as UserBankDetails, json) as T;	  }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {				case User:
			return userToJson(data as User);			case UserWallet:
			return userWalletToJson(data as UserWallet);			case UserDocuments:
			return userDocumentsToJson(data as UserDocuments);			case UserPaymentCards:
			return userPaymentCardsToJson(data as UserPaymentCards);			case TimeSlot:
			return timeSlotToJson(data as TimeSlot);			case UserSubscription:
			return userSubscriptionToJson(data as UserSubscription);			case UserBankDetails:
			return userBankDetailsToJson(data as UserBankDetails);	  }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {				case 'User':
			return User().fromJson(json);			case 'UserWallet':
			return UserWallet().fromJson(json);			case 'UserDocuments':
			return UserDocuments().fromJson(json);			case 'UserPaymentCards':
			return UserPaymentCards().fromJson(json);			case 'TimeSlot':
			return TimeSlot().fromJson(json);			case 'UserSubscription':
			return UserSubscription().fromJson(json);			case 'UserBankDetails':
			return UserBankDetails().fromJson(json);  }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'User':
			return List<User>();			case 'UserWallet':
			return List<UserWallet>();			case 'UserDocuments':
			return List<UserDocuments>();			case 'UserPaymentCards':
			return List<UserPaymentCards>();			case 'TimeSlot':
			return List<TimeSlot>();			case 'UserSubscription':
			return List<UserSubscription>();			case 'UserBankDetails':
			return List<UserBankDetails>();   }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}